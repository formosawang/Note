1. slot的应用场景，印象最深的，这两样看的最多的可能就是组件的封装了，运用slot来占位，来自定义自己想要展示的内容，也就是这两天，可能才知道了组件的封装是怎么回事，知道了那些开源的框架组件是怎
么封装的，是怎么通过属性来定义我们自己想要的内容的，父组件中的 v-slot:title就等价于#title，还等价于slot='title',给我的感觉是这样，就看自己怎用了，这个是具名插槽，那么在子组件中，就会找到对
应的名字，从而把父组件中的自定义的内容放在子组件的对应的位置，还要注意的是，如果用v-slot:title和#title的时候，在外层必须用template来套着，name='title'的话，好像就不需要套template，这是需
要注意的地方
2. sourceMap的作用，就是找到源代码和打包之后的代码的映射关系，以至于报错的时候，方便查找自己哪里错了，会显示在源代码，也就是自己写的代码中的错误位置
3. 用了postcss-px-to-viewport之后，内联样式是不生效的，好像暂时只看到了内联的样式是不会生效的，这个插件用于把px转换为视口的宽度值，在我的理解来说，比如给的原型图宽度是30px，然后通过插件转换
之后，加入就变成了4vw,然后在我们更改设备的时候，设备变了，宽度也变了，但是4vw还是4vw，这个是不会变的，只是实际所占的宽度改变了，因为现在的设备宽度变了，所以4vw就变成了此时设备的4vw,也就跟着
转换成了对应的px值，所以才实现了适配，这就是我的理解
4. vue的样式绑定用三元运算符很适合，能够减少大量的重复代码。印象最深刻的是单选框的使用，配合是否选中，决定想要的样式.
5. 很重要很重要很重要，今天学到的一招，以前都没注意过这个问题，就是报错，xxx is not a function 这种问题一般是调用的这个方法的对象出了问题，比如这个方法是给一个数字用的，但
是调用的时候没有注意，调方法的这个对象变了，变成了字符串，那么就会报这种错，所以一般在调用方法的时候，一般事先会判断一下对象是否存在或者类型，不然就会报这种错。
6. autoprefixer这个加浏览器前缀的插件，配置好了，npm run build的时候，出现了问题，结果是因为在配置浏览器的那里出了问题，还有就是vue脚手架建项目的时候，就已经安装
了autoprefixer这个的，只是没有启用，所以只需要在vue.config.js里面配置一下就行了
